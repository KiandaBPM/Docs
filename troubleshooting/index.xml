<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kianda low-code platform for business process automation â€“ Troubleshooting</title><link>https://docs.kianda.com/troubleshooting/</link><description>Recent content in Troubleshooting on Kianda low-code platform for business process automation</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.kianda.com/troubleshooting/index.xml" rel="self" type="application/rss+xml"/><item><title>Troubleshooting: Version history and auditing</title><link>https://docs.kianda.com/troubleshooting/version-history-and-auditing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kianda.com/troubleshooting/version-history-and-auditing/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As an &lt;strong>administrator&lt;/strong> you can test &lt;strong>process designs&lt;/strong> using the &lt;a href="https://docs.kianda.com/platform/application-designer/designer/previewer/">Previewer&lt;/a> and &lt;strong>roll-back to earlier versions&lt;/strong> using the steps in &lt;a href="https://docs.kianda.com/platform/application-designer/designer/version-history/">Version history&lt;/a> page. In addition to managing process design version history, as an administrator you can manage process instance history using the &lt;strong>Process history&lt;/strong> feature. This will allow administrators to view when data has been saved for a particular record, who has saved the data and the changes made going from one version of the record to another.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before getting started, consider a particular process that requires investigation, using the name of the process design found in the &lt;a href="https://docs.kianda.com/platform/application-designer/">Process designer&lt;/a> page, for example Asset Request is a chosen process design as shown in the image below.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/process-design-example.jpg" alt="Process design example">&lt;/p>
&lt;p>Then check the records or instances of the process design by going to or creating a dashboard page and viewing a &lt;a href="https://docs.kianda.com/platform/pages/list/">List&lt;/a> widget that is linked to that process design. For example in the image below there are six process instances for the Asset Request design. We can investigate one of these in the steps below.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/list-of-instances-example.jpg" alt="List of process instances for Asset Request process design">&lt;/p>
&lt;h2 id="process-instance-version-history">Process instance version history&lt;/h2>
&lt;p>&lt;strong>Process instances&lt;/strong> can be accessed from a &lt;strong>list widget&lt;/strong> in a dashboard page linked to the process design. Access to the dashboard and list widget can be set using security settings, see &lt;a href="https://docs.kianda.com/security/process-level-security/#dashboard-security">Dashboard security&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/chosen-instance-example.jpg" alt="Example of a chosen process instance">&lt;/p>
&lt;p>For example by clicking on a process ID like &amp;lsquo;asset-request-3&amp;rsquo; as seen in the list widget above, we can then see the actual record/process instance held in the system. In the Asset Request example below, all forms have had data submitted, including the last form in the process, the Order form.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/accessing-process-history.jpg" alt="Accessing process history within a record">&lt;/p>
&lt;p>&lt;strong>Administrators&lt;/strong> have access to the process instance history feature highlighted above, to manage process instance versions. By clicking on the &lt;strong>process history&lt;/strong> button, the &lt;strong>Process history and Rule diagnostics view&lt;/strong> opens. Manage the history of the record/instance by following the steps below:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Click on the &lt;strong>Process history&lt;/strong> tab.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/process-history-tab.jpg" alt="Process history view">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>View all versions of the process instance in the Process history view. Here you can see the number of the version, the date the version was created, who modified the version and you can restore to that version by clicking on the &lt;strong>Restore&lt;/strong> button &lt;img src="https://docs.kianda.com/images/restore.png" alt="Restore button">. To see the details of a version click on the hyperlinked &lt;strong>Modified date&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/process-version-eg.jpg" alt="Process history version example">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Within the Version page you can see which &lt;strong>forms and fields&lt;/strong> were &lt;strong>modified&lt;/strong>/updated and which &lt;strong>rules were executed&lt;/strong>.&lt;/p>
&lt;p>For example in the version below, you can see &lt;strong>system generated anonymous links&lt;/strong> such as that stored in in the field &amp;lsquo;Anonymous Order form Link&amp;rsquo; which can be useful to retrieve and test.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/process-history-details.jpg" alt="Process instance history details">&lt;/p>
&lt;p>You can also see &lt;strong>changes&lt;/strong> in values, for example by default the Approval Status field in Kianda Designer is set to &amp;lsquo;False&amp;rsquo;, but when a user choose a Management Decision value of &amp;lsquo;Yes&amp;rsquo;, a Set form field rule will execute a rule to set a value in the field to &amp;lsquo;True&amp;rsquo;. This rule can be seen when the process design is viewed.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/set-form-field-eg.jpg" alt="Set form field rule example">&lt;/p>
&lt;p>A good knowledge of the process design as seen in Kianda &lt;a href="https://docs.kianda.com/platform/application-designer/designer/">Designer&lt;/a> is necessary to support troubleshooting changes in process instances.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on the &lt;strong>Back&lt;/strong> button &lt;img src="https://docs.kianda.com/images/back-process-history.jpg" alt="Back button"> or &lt;strong>Close&lt;/strong> to return to the list of process instance versions.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="whats-next--idea-iconimages18png">What&amp;rsquo;s next &lt;img src="https://docs.kianda.com/images/18.png" alt="Idea icon">&lt;/h3>
&lt;p>Now that you&amp;rsquo;ve learned about &lt;strong>Version history and auditing&lt;/strong>, find out more about other troubleshooting features:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/rule-debugger">Rule debugger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/rule-diagnostics/">Rule diagnostics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/custom-widget-debugging/">Custom widget debugging&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Troubleshooting: Rule debugger</title><link>https://docs.kianda.com/troubleshooting/rule-debugger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kianda.com/troubleshooting/rule-debugger/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The &lt;strong>Rule debugger&lt;/strong> is a troubleshooting feature that allows you to visualise each rule being executed in your process design within the preview window. It provides an insight into the logical flow of a process and serves as an important troubleshooting feature if your process does not work as expected. As well as this, it states what rule is being executed and on what field it is acting upon, alongside any associated conditions.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/rule-debugger-example.jpg" alt="Rule debugger in action example">&lt;/p>
&lt;p>The &lt;strong>Rule Debugger&lt;/strong> can be turned on at any point, for example when starting a new process or using the Previewer. We look at the &lt;a href="https://docs.kianda.com/platform/application-designer/designer/previewer/">Previewer&lt;/a> in the steps below, however you can also access this feature via &lt;a href="https://docs.kianda.com/troubleshooting/rule-diagnostics/">Rule diagnostics&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before getting started, you must open a process design of your choice that features rules that require debugging.&lt;/p>
&lt;h2 id="how-to-get-started">How to get started&lt;/h2>
&lt;p>To access the rule debugger feature:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Navigate to the left-hand pane of the designer screen and click on the &lt;strong>Run and preview process&lt;/strong> button &lt;img src="https://docs.kianda.com/images/preview.png" alt="run and preview process button" style="zoom:150%;" />.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/preview-process-left-hand-pane.png" alt="Left hand pane clicking the preview button">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the preview window, click on the &lt;strong>Enable / Disable Rule debugging&lt;/strong> button &lt;img src="https://docs.kianda.com/images/rule-debugger-btn.png" alt="rule debugger button"> in the top right corner of the window.&lt;/p>
&lt;img src="https://docs.kianda.com/images/rule-debugger-preview2.png" alt="rule debugger in the preview window" style="zoom:80%;" />
&lt;/li>
&lt;li>
&lt;p>Begin entering data into your process as expected until the rule debugger modal dialog appears in the bottom right of the preview window. This appears as soon as the first rule is encountered in the design&amp;rsquo;s logical workflow.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/rule-debugger-modal.png" alt="Rule debugger dialog box">&lt;/p>
&lt;p>The rule debugger dialog displays information such as the &lt;strong>Rule&lt;/strong> currently being executed, any &lt;strong>Conditions&lt;/strong> associated with the rule and the &lt;strong>Field&lt;/strong> the rule is being enacted upon. Three buttons are also displayed, allowing you to:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Execute rule&lt;/strong> - executes the &lt;strong>currently displayed rule&lt;/strong> on the currently displayed field, along with any conditions specified where you have two or more rules attached to a field, form or process. Once all the rules are executed for that field, then the dialog box will disappear and the system awaits further data input into the form&amp;rsquo;s fields until the next rule or block of rules attached to a field are met.&lt;/li>
&lt;li>&lt;strong>Resume&lt;/strong> - resumes the &lt;strong>execution of all rules in a block&lt;/strong> where there are two or more rules attached to a field, form or process. The rule debug dialog will only then reappear when new data is entered into another field in the process flow.&lt;/li>
&lt;li>&lt;strong>Stop debug&lt;/strong> - &lt;strong>exits the debugging mode&lt;/strong> and the rule debug dialog box disappears. You will not receive messages about current rule execution, but will remain in the process preview window.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>You can alter the conditions on the currently displayed rule (if any), by clicking on the &lt;strong>Conditions&lt;/strong> filter button &lt;img src="https://docs.kianda.com/images/conditions-filter-btn.png" alt="Conditions filter button image">. This will display another modal dialog box, which gives you the option to change the condition being applied to the rule, add further conditions, remove some conditions and more - allowing for the troubleshooting of different use cases within your process. To learn more about this, see &lt;a href="https://docs.kianda.com/platform/rules/general/add-conditions/">Conditions&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/rule-debugger-conditions.png" alt="Conditions dialog for rule debugger">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>To exit the debugging process, you can click on the &lt;strong>Stop debug&lt;/strong> button &lt;img src="https://docs.kianda.com/images/stop-debug-btn.png" alt="stop debug button">, or alternatively click on the &lt;strong>Enable / Disable Rule debugging&lt;/strong> button &lt;img src="https://docs.kianda.com/images/rule-debugger-btn.png" alt="rule debugger button" style="zoom:80%;" />, or click on the &lt;strong>Exit preview mode&lt;/strong> button &lt;img src="https://docs.kianda.com/images/exit-preview-window-btn.png" alt="exit window preview button" style="zoom:80%;" />.&lt;/p>
&lt;h3 id="whats-next--idea-iconimages18png">What&amp;rsquo;s next &lt;img src="https://docs.kianda.com/images/18.png" alt="Idea icon">&lt;/h3>
&lt;p>Now that you&amp;rsquo;ve learned about the &lt;strong>Rule debugger&lt;/strong>, find out more about other troubleshooting features:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/custom-widget-debugging/">Custom widget debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/rule-diagnostics/">Rule diagnostics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/version-history-and-auditing">Version history and Auditing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Troubleshooting: Rule diagnostics</title><link>https://docs.kianda.com/troubleshooting/rule-diagnostics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kianda.com/troubleshooting/rule-diagnostics/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;strong>Rule diagnostics&lt;/strong> is a troubleshooting feature within Kianda that allows you to view a nested list of all forms, fields and rules - the purpose being that you can choose to &lt;strong>manually trigger&lt;/strong> these rules for diagnostic purposes, as well as &lt;strong>toggle field visibility&lt;/strong>, &lt;strong>re-assign forms&lt;/strong>, and more.&lt;/p>
&lt;p>The rule diagnostics feature is available for troubleshooting specific &lt;a href="https://docs.kianda.com/troubleshooting/version-history-and-auditing/">Process instances&lt;/a> where as the &lt;a href="https://docs.kianda.com/troubleshooting/rule-debugger">Rule debugger&lt;/a> feature focuses more so on troubleshooting a process design pre-publishing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before getting started, you must open a process instance that you would like to perform rule diagnostics on.&lt;/p>
&lt;h2 id="how-to-get-started">How to get started&lt;/h2>
&lt;p>To access the rule diagnostics feature:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>On your chosen process instance, click on the &lt;strong>Process history&lt;/strong> button &lt;img src="https://docs.kianda.com/images/process-history-button.jpg" alt="process history button" style="zoom:150%;" /> in the top right-hand corner of the screen. This will open the Process history modal dialog box.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/process-history-btn2.png" alt="Process history">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the process history dialog, navigate to the &lt;strong>Rule diagnostics&lt;/strong> tab. From here, you can view a nested list of all forms, fields and rules. In the example below, you can view rules and fields across three different forms in the process, as well as expand the onload rules. You can search for a specific element in your process by utilising the search bar.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/process-history-modal1.png" alt="rule diagnostics tab">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are many possibilities for testing your process instance, however in this example we will try to troubleshoot the &lt;a href="https://docs.kianda.com/platform/rules/communications/send-email/">Send email rule&lt;/a> to ensure that the line manager receives the correctly formatted email during this process.&lt;/p>
&lt;p>To do this, we will drill down into the following path: &lt;em>Asset request&lt;/em> form &amp;gt; &lt;em>Submit&lt;/em> button &amp;gt; &lt;em>Rules&lt;/em> &amp;gt; &lt;em>Email Line Manager&lt;/em>.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/expanding-process-instance.png" alt="Drill down into line manager">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Beside the &lt;em>Email Line Manager&lt;/em> rule, click on the orange &lt;strong>Trigger&lt;/strong> bolt button &lt;img src="https://docs.kianda.com/images/trigger-btn.png" alt="trigger bolt button" style="zoom:150%;" /> to &lt;strong>manually trigger&lt;/strong> the rule. This is a powerful feature as you do not need to fill out an entire process from start to finish to troubleshoot this. You will then see a &lt;em>Rule executed&lt;/em> alert at the top of the page, and the specific rule should perform as expected.&lt;/p>
&lt;img src="https://docs.kianda.com/images/request-assets-email.png" alt="Request assets email sent to the line manager" style="zoom:67%;" />
&lt;/li>
&lt;li>
&lt;p>There are other features you can troubleshoot in the &lt;strong>Rule diagnostics&lt;/strong> tab such as clicking:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Toggle form visibility&lt;/strong> button &lt;img src="https://docs.kianda.com/images/toggle-visibility-btn.png" alt="toggle visibility button"> - to hide or show the selected form&lt;/li>
&lt;li>&lt;strong>Make editable&lt;/strong> button &lt;img src="https://docs.kianda.com/images/editable-btn.png" alt="Editable button"> - make the current field/form editable&lt;/li>
&lt;li>&lt;strong>Re-assign form&lt;/strong> button &lt;img src="https://docs.kianda.com/images/re-assign-btn.png" alt="re-assign button"> - to assign the form to a different person&lt;/li>
&lt;li>&lt;strong>Go to form&lt;/strong> button &lt;img src="https://docs.kianda.com/images/go-to-form-btn.png" alt="go to form button"> - snaps to the selected form&lt;/li>
&lt;li>&lt;strong>Toggle field enable&lt;/strong> button &lt;img src="https://docs.kianda.com/images/toggle-field-enable-btn.png" alt="toggle field enable"> - to enable/disable the selected field&lt;/li>
&lt;/ul>
&lt;p>As well as this, the &lt;strong>Rule executed status&lt;/strong> can be seen beside each rule - a green tick &lt;img src="https://docs.kianda.com/images/green-tick.png" alt="green tick"> for executed, and a grey tick &lt;img src="https://docs.kianda.com/images/grey-tick.png" alt="grey tick"> for not executed.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/rule-diagnostics-other-btns.png" alt="Rule diagnostics other buttons">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To change the current form in your process instance, you can click on the &lt;strong>Change current active form&lt;/strong> button &lt;img src="https://docs.kianda.com/images/change-current-active-form-btn.png" alt="change current active form button"> below the form list. This will allow you to troubleshoot different forms and how they behave when changed to the active form in the process.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/current-form-screen.png" alt="other debug features">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can also choose to &lt;strong>Enable rule debugging&lt;/strong> by choosing the &lt;em>Yes&lt;/em> radio button, also below the nested list. This will enable the &lt;a href="https://docs.kianda.com/troubleshooting/rule-debugger">Rule debugger&lt;/a> feature, however instead of executing within a process design preview window, it will enact upon your selected process instance. The rule debugger modal dialog will appear in the bottom right-hand corner of the screen.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/rule-debugger-within-rule-diagnostics.png" alt="Rule debugger modal dialog within rule diagnostics">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When finished troubleshooting, click the &lt;strong>Close&lt;/strong> button to close the process history dialog box.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="whats-next--idea-iconimages18png">What&amp;rsquo;s next &lt;img src="https://docs.kianda.com/images/18.png" alt="Idea icon">&lt;/h3>
&lt;p>Now that you&amp;rsquo;ve learned about the &lt;strong>Rule Diagnostics&lt;/strong>, find out more about other troubleshooting features:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/custom-widget-debugging/">Custom Widget Debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/rule-debugger/">Rule Debugger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/version-history-and-auditing">Version History and Auditing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Troubleshooting: Custom widget debugging</title><link>https://docs.kianda.com/troubleshooting/custom-widget-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.kianda.com/troubleshooting/custom-widget-debugging/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Within your Kianda platform, you have the option to create your own &lt;strong>custom widgets&lt;/strong> if the many pre-configured fields, rules or dashboard elements do not suit. Naturally, you might want to troubleshoot your created code if it does not perform as expected. This page will outline and detail several important code &lt;strong>debugging practices&lt;/strong> you can implement in your custom widget to ensure correct operation. As well as this, some of these methods can be applied to troubleshoot your own &lt;strong>custom connectors&lt;/strong> within your platform.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before getting started, open a custom widget of your choice in code edit mode within Kianda &lt;a href="https://docs.kianda.com/platform/administration/developer/">Developer&lt;/a>. For example choose features within rule, field, dashboard elements that require debugging.&lt;/p>
&lt;h2 id="custom-widget-debugging-practices">Custom widget debugging practices&lt;/h2>
&lt;p>There are several methods of debugging your custom &lt;a href="https://docs.kianda.com/low-code/field-widget/">field&lt;/a>, &lt;a href="https://docs.kianda.com/low-code/rule-widget/">rule&lt;/a>, and &lt;a href="https://docs.kianda.com/low-code/dashboard-widget/">dashboard&lt;/a> widgets listed below. You can also investigate and understand &lt;strong>Ember.js&lt;/strong> on your Kianda platform via the &lt;a href="https://docs.kianda.com/low-code/using-the-ember-inspector/">Ember.js inspector&lt;/a>, an an open-source JavaScript web application framework that allows you to build highly interactive applications that use JavaScript in a quick and efficient manner.&lt;/p>
&lt;p>On this page, we will look at using &lt;a href="https://developer.chrome.com/devtools/">Google Chrome Developer Tools&lt;/a>, however most web browsers provide web analysis and debugging tools such as &lt;a href="https://www.mozilla.org/en-US/firefox/developer/">Mozilla Firefox Developer Tools&lt;/a> and &lt;a href="https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/Web_Inspector_Tutorial/Introduction/Introduction.html#//apple_ref/doc/uid/TP40017576-CH1-SW1">Safari Web Inspector&lt;/a>.&lt;/p>
&lt;h3 id="developer-console">Developer console&lt;/h3>
&lt;p>You can simply print information relating to your widget within the developer console by utilising JavaScript methods such as &lt;strong>&lt;code>getElementsByClassName&lt;/code>&lt;/strong> on the document object. Depending on the code you have written, this method can be useful in returning attributes of your chosen array of classes.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/developer-console-debug.png" alt="Printing to the developer console">&lt;/p>
&lt;p>To print debugging messages to the console:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Navigate to a process that features the &lt;strong>custom field&lt;/strong> or &lt;strong>rule&lt;/strong> you would like to troubleshoot, or alternatively in this case, navigate to the dashboard that features the &lt;strong>custom dashboard widget&lt;/strong> you would like to troubleshoot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right click on the page and select &lt;strong>Inspect&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/inspect.png" alt="inspect page">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Within the developer tools window, click on the &lt;strong>Console&lt;/strong> tab. From here you can write various queries and debugging snippets that can aid in the troubleshooting process.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/console-tab.png" alt="console tab">&lt;/p>
&lt;p>In this example, we are looking at a custom dashboard widget that features a frequently asked questions (FAQ) accordion. Each question division has the class name of &lt;em>accordionTrainingDashboard&lt;/em>, so to obtain the attributes of each division, we query a chosen index of the array of divisions and add the &lt;em>.attributes&lt;/em> element to the end:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getElementsByClassName&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;accordionTrainingDashboard&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">attributes&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">NamedNodeMap&lt;/span>Â &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">ember&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">ember&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1163&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">ember&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">ember&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">ember&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1163&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">ember&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1163&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">length&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code displays various attributes relating to the third question in the FAQ accordion, however other properties and methods can be called in the developer console instead of &lt;em>.attributes&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>.style&lt;/strong> - to view the custom CSS that is being applied to the HTML. For more on this, see &lt;a href="https://docs.kianda.com/low-code/global-css/">Global CSS File&lt;/a>.&lt;/li>
&lt;li>&lt;strong>.focus()&lt;/strong> - if your HTML elements appear to be hidden or out of focus, the &lt;em>.focus()&lt;/em> method snaps the browser view to the elements position.&lt;/li>
&lt;li>&lt;strong>.innerHTML&lt;/strong> - returns the HTML content within the selected element, useful for analysing and manipulating content.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="consolelog-method">Console.log() method&lt;/h3>
&lt;p>The &lt;strong>console.log()&lt;/strong> method is a useful JavaScript method that prints out values that are passed into it as a parameter. This is useful for troubleshooting logical problems within your code at any point to ensure the correct operation of your widget.&lt;/p>
&lt;p>For example within a custom field widget&amp;rsquo;s actual source code, you might want to confirm the value of a file URL field by adding a console.log() statement after the variable is declared and initialised:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">fileURLField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">process&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">findFieldByName&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rule.settings.fileURL.name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fileURLField&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fileURLField&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://xyz.kianda.com/api/file/kianda-data/?file=&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">sourceField&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">fileUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, the URL will be printed to the developer console before calling the &lt;em>.set&lt;/em> method to it to ensure the correct URL is being set.&lt;/p>
&lt;h3 id="debugger-function">Debugger function&lt;/h3>
&lt;p>The &lt;strong>debugger&lt;/strong> function is a JavaScript function that allows for troubleshooting your code in a step-by-step process using code breakpoints. When the debugger function is called, any values that were declared and initialised, or any calculations that were made will be highlighted and displayed in the developer tools tab &lt;strong>Sources&lt;/strong>.&lt;/p>
&lt;p>To use the debugger function:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Navigate to a process that features the &lt;strong>custom field&lt;/strong> or &lt;strong>rule&lt;/strong> you would like to troubleshoot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right click on the page and select &lt;strong>Inspect&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/inspect.png" alt="inspect page">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Within the developer tools window, click on the &lt;strong>Sources&lt;/strong> tab.&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/source-tab.png" alt="console tab">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>From here, execute your code/begin entering data into your custom widget.&lt;/p>
&lt;p>As seen in the image below:&lt;/p>
&lt;p>&lt;img src="https://docs.kianda.com/images/sources-tab4.png" alt="sources tab look">&lt;/p>
&lt;ol>
&lt;li>Clicking on the &lt;strong>Play/pause&lt;/strong> button will begin executing the code.&lt;/li>
&lt;li>The code execution pauses when it reaches the &lt;strong>debugger&lt;/strong> function. If you would like to execute the code until the next debugger function, click on the Play/pause button again.&lt;/li>
&lt;li>The values/calculations are displayed under the &lt;strong>Script&lt;/strong> heading in the bottom right-hand corner and will be updated on each iteration.&lt;/li>
&lt;li>You can choose to select further code &lt;strong>Breakpoints&lt;/strong> by ticking the checkboxes beside &lt;em>Pause on uncaught exceptions&lt;/em> and &lt;em>Pause on caught exceptions&lt;/em>.&lt;/li>
&lt;/ol>
&lt;p>The debugger function operates similarly to the &lt;a href="https://docs.kianda.com/troubleshooting/rule-debugger">Rule debugger&lt;/a> with its iterative, step-by-step stage based troubleshooting flow.&lt;/p>
&lt;h3 id="other-debugging-practices">Other debugging practices&lt;/h3>
&lt;p>There are several other useful debugging practices you can implement within your Kianda platform:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Console.error()&lt;/strong> - this method similar to console.log() outputs an error message to the developer console with a red warning symbol.&lt;/li>
&lt;li>&lt;strong>Try - catch statements&lt;/strong> - you can wrap your code in a try - catch block so that expected errors are handled appropriately. This is a preventative measure for certain scenarios such as a user entering invalid data.&lt;/li>
&lt;li>Other developer tools like:
&lt;ul>
&lt;li>&lt;strong>Network&lt;/strong> tab to monitor and analyse network activity between the client and server - useful for investigating bottlenecks and throttling such as uploading large files. Throttling is described as intentionally slowing down your network speed to imitate scenarios where a poor network connection might occur.&lt;/li>
&lt;li>&lt;strong>Elements&lt;/strong> tab allows you to inspect the nested HTML structure of your page and visualise any applied CSS styles, as well as allowing manipulation via the box model visualiser.&lt;/li>
&lt;li>&lt;strong>Performance&lt;/strong> tab showcases JavaScript execution, memory usage and more. It differs from the network tab in that it analyses overall performance as opposed to specific requests.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="whats-next--idea-iconimages18png">What&amp;rsquo;s next &lt;img src="https://docs.kianda.com/images/18.png" alt="Idea icon">&lt;/h3>
&lt;p>Now that you&amp;rsquo;ve learned about the &lt;strong>Custom widget debugging&lt;/strong>, find out more about other troubleshooting features:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/rule-debugger">Rule debugger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/rule-diagnostics/">Rule diagnostics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.kianda.com/troubleshooting/version-history-and-auditing">Version history and Auditing&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>